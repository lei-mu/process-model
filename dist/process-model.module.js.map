{"version":3,"file":"process-model.module.js","sources":["../src/utils/check.js","../src/types/index.js","../src/types/image.js","../src/types/imm.js","../src/types/video.js","../src/processModel/config.js","../src/processModel/ProcessModel.js","../src/utils/index.js"],"sourcesContent":["// import { protocol } from './regix'\r\n// import { isObject, isFunction } from 'lodash-es'\r\n// import isPlainObject from 'lodash-es/isPlainObject'\r\n\r\n// export const checkProtocol = (val) => {\r\n//   return protocol.test(val)\r\n// }\r\n\r\n// export const isPromise = (val) => {\r\n//   return isObject(val) && isFunction(val.then) && isFunction(val.catch)\r\n// }\r\nconst kindOf = (cache => thing => {\r\n  const str = toString.call(thing);\r\n  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\r\n})(Object.create(null));\r\n\r\nconst typeOfTest = type => thing => typeof thing === type;\r\n\r\nconst {getPrototypeOf} = Object;\r\n\r\nconst isPlainObject = (val) => {\r\n  if (kindOf(val) !== 'object') {\r\n    return false;\r\n  }\r\n\r\n  const prototype = getPrototypeOf(val);\r\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\r\n}\r\n\r\n\r\n\r\nexport const isString = typeOfTest('string');\r\n\r\n\r\nexport const isUndefined = typeOfTest('undefined');\r\n\r\n\r\n\r\n/***\r\n * 是否为空\r\n * @param val\r\n * @return {boolean}\r\n */\r\nexport function isEmpty(val) {\r\n  return (val === null) || (val === undefined) || (val === '')\r\n}\r\n\r\n/***\r\n * 是否是一个 不为空的真对象\r\n */\r\n\r\nexport function isNotEmptyObj(val) {\r\n  return isPlainObject(val) && Object.getOwnPropertyNames(val).length !== 0\r\n}\r\n","import {\r\n  WITHOUT_PARAMETERS_COMMAND as imageWithout,\r\n  COMMAND_SORT as imageSort,\r\n  MULTIPLE_ARG_COMMAND as imageMultiple\r\n} from './image'\r\nimport {\r\n  WITHOUT_PARAMETERS_COMMAND as immWithout,\r\n  COMMAND_SORT as immSort,\r\n  MULTIPLE_ARG_COMMAND as immMultiple\r\n} from './imm'\r\nimport {\r\n  WITHOUT_PARAMETERS_COMMAND as videoWithout,\r\n  COMMAND_SORT as videoSort,\r\n  MULTIPLE_ARG_COMMAND as videoMultiple\r\n} from './video'\r\n\r\n// 任务流名称\r\nexport const PROCESS_NAME = 'x-image-process'\r\n\r\n/**\r\n * 分隔符\r\n * https://support.huaweicloud.com/fg-obs/obs_01_0224.html#obs_01_0224__table19527120647\r\n * */\r\n// 参数分隔符\r\nexport const PARAMETER_SEPARATOR = '_'\r\n\r\n// 命令分隔符\r\nexport const COMMAND_SEPARATOR = ','\r\n\r\n// 管道分隔符\r\nexport const PIPE_SEPARATOR = '/'\r\n\r\n// 无参数命令\r\nexport const WITHOUT_PARAMETERS_COMMAND = [...imageWithout, ...immWithout, ...videoWithout]\r\n\r\n// 命令排序\r\nexport const COMMAND_SORT = [...imageSort, ...immSort, ...videoSort]\r\n\r\n// 有多个参数的命令\r\nexport const MULTIPLE_ARG_COMMAND = [...imageMultiple, ...immMultiple, ...videoMultiple]\r\n","/***\r\n * https://support.huaweicloud.com/ugobs-obs/obs_41_0032.html\r\n *\r\n */\r\n\r\n\r\n\r\n\r\n\r\n/***\r\n * 图片处理\r\n */\r\n\r\n/**\r\n * 图片效果\r\n * */\r\n// 亮度\r\nexport const COMMAND_BRIGHT = 'bright'\r\n\r\n// 对比度\r\nexport const COMMAND_CONTRAST = 'contrast'\r\n\r\n// 锐化\r\nexport const COMMAND_SHARPEN = 'sharpen'\r\n\r\n// 模糊\r\nexport const COMMAND_BLUR = 'blur'\r\n\r\n/**\r\n * 设置缩略\r\n * */\r\nexport const COMMAND_RESIZE = 'resize'\r\n\r\n/**\r\n * 旋转图片\r\n * */\r\n// 旋转设置\r\nexport const COMMAND_ROTATE = 'rotate'\r\n\r\n// 自适应方向\r\nexport const COMMAND_AUTO_ORIENT = 'auto-orient'\r\n\r\n/**\r\n * 剪切图片\r\n * */\r\n// 普通剪切\r\nexport const COMMAND_CROP = 'crop'\r\n\r\n// 内切圆\r\nexport const COMMAND_CIRCLE = 'circle'\r\n\r\n// 索引剪切\r\nexport const COMMAND_INDEXCROP = 'indexcrop'\r\n\r\n// 圆角剪切\r\nexport const COMMAND_ROUNDED_CORNERS = 'rounded-corners'\r\n\r\n/**\r\n * 设置水印\r\n * */\r\n// 设置水印\r\nexport const COMMAND_WATERMARK = 'watermark'\r\n\r\n/**\r\n * 格式转换\r\n * */\r\n// 格式转换\r\nexport const COMMAND_FORMAT = 'format'\r\n\r\n// 渐进显示\r\nexport const COMMAND_INTERLACE = 'interlace'\r\n\r\n/**\r\n * 质量变换\r\n * */\r\n// 质量变换\r\nexport const COMMAND_QUALITY = 'quality'\r\n\r\n// 设置图片瘦身\r\nexport const COMMAND_IMAGESLIM = 'imageslim'\r\n\r\n/**\r\n * 获取图片信息\r\n * */\r\nexport const COMMAND_INFO = 'info'\r\n\r\n/***\r\n * 获取图片平均色值\r\n * @type {string}\r\n */\r\n// 获取图片平均色值\r\nexport const COMMAND_AVERAGE_HUE = 'average-hue'\r\n\r\n// 无参数命令\r\nexport const WITHOUT_PARAMETERS_COMMAND = [COMMAND_INFO, COMMAND_AVERAGE_HUE, COMMAND_IMAGESLIM]\r\n\r\n// 命令排序\r\nexport const COMMAND_SORT = [COMMAND_RESIZE, COMMAND_CROP, COMMAND_CIRCLE, COMMAND_INDEXCROP, COMMAND_ROUNDED_CORNERS, COMMAND_ROTATE, COMMAND_AUTO_ORIENT, COMMAND_BRIGHT, COMMAND_CONTRAST, COMMAND_SHARPEN, COMMAND_BLUR, COMMAND_WATERMARK, COMMAND_QUALITY, COMMAND_FORMAT, COMMAND_INTERLACE, COMMAND_IMAGESLIM, COMMAND_INFO, COMMAND_AVERAGE_HUE]\r\n\r\n// 有多个参数的命令\r\nexport const MULTIPLE_ARG_COMMAND = [COMMAND_BLUR,COMMAND_RESIZE,COMMAND_CROP,COMMAND_CIRCLE,COMMAND_INDEXCROP,COMMAND_ROUNDED_CORNERS,COMMAND_WATERMARK,COMMAND_QUALITY]\r\n","// https://help.aliyun.com/document_detail/99373.html\r\n\r\n/***\r\n * imm 常量\r\n */\r\n\r\n\r\n// 文档预览\r\nexport const COMMAND_PREVIEW = 'previewdoc'\r\n\r\n// 人脸识别\r\nexport const COMMAND_DETECTFACE = 'detectface'\r\n\r\n// 图片识别\r\nexport const COMMAND_TAGIMAGE = 'tagimage'\r\n\r\n\r\n\r\n// 无参数命令\r\nexport const WITHOUT_PARAMETERS_COMMAND = [COMMAND_DETECTFACE,COMMAND_TAGIMAGE]\r\n\r\n// 命令排序\r\nexport const COMMAND_SORT = []\r\n\r\n// 有多个参数的命令\r\nexport const MULTIPLE_ARG_COMMAND = []\r\n","/***\r\n * 视频处理常量\r\n */\r\n\r\nexport const COMMAND_SNAPSHOT = 'snapshot'\r\n\r\n// 无参数命令\r\nexport const WITHOUT_PARAMETERS_COMMAND = []\r\n\r\n// 命令排序\r\nexport const COMMAND_SORT = []\r\n\r\n// 有多个参数的命令\r\nexport const MULTIPLE_ARG_COMMAND = [COMMAND_SNAPSHOT]\r\n","import {\r\n  WITHOUT_PARAMETERS_COMMAND,\r\n  PIPE_SEPARATOR,\r\n  COMMAND_SEPARATOR,\r\n  PARAMETER_SEPARATOR,\r\n  COMMAND_SORT,\r\n  MULTIPLE_ARG_COMMAND\r\n} from '../types'\r\n\r\nexport default {\r\n  // 无参数命令合集\r\n  withoutParamsCommand: WITHOUT_PARAMETERS_COMMAND,\r\n  // 多个参数的命令合集\r\n  multipleArgCommand: MULTIPLE_ARG_COMMAND,\r\n  // 命令排序规则\r\n  commandSort: COMMAND_SORT,\r\n  PIPE_SEPARATOR,\r\n  PARAMETER_SEPARATOR,\r\n  COMMAND_SEPARATOR\r\n}\r\n","import { isEmpty as myIsEmpty, isNotEmptyObj, isString, isUndefined } from '../utils/check'\r\nimport {deepClone} from '../utils/index.js'\r\n\r\nimport defaultsConfig from './config'\r\nimport {version} from '../../package.json'\r\n// import isObject from 'lodash-es/isObject'\r\n// import isEmpty from 'lodash-es/isEmpty'\r\n\r\n// 无参数命令 的默认值\r\n// eslint-disable-next-line no-void\r\nconst NO_ARG_COMMAND_VAL = void (0)\r\n\r\n// 没有参数的标识key\r\nconst WITHOUT_PARAMETERS = 'without'\r\n// 单参数命令\r\nconst SINGLE_PARAMETER = 'single'\r\n// 多参数标识\r\nconst MULTI_PARAMETER = 'multi'\r\n\r\n// 参数的key\r\nconst ARGUMENTS_NAME = 'value'\r\n\r\n// 参数类型\r\nconst COMMAND_TYPE_KEY = 'type'\r\n/**\r\n * @example\r\n * https://shigongbang.obs.cn-east-3.myhuaweicloud.com/material/650000/20210720219212964129485?x-image-process=image/resize,m_fill,w_270,h_205,limit_0\r\n * 只处理 x-image-process 字段，或者数组\r\n *\r\n * */\r\nexport default class ProcessModel {\r\n  // TODO 后期考虑增加type,区分 image,video,imm。精细处理\r\n  constructor (model, config = {}) {\r\n    this._model = []\r\n    this._config = deepClone({\r\n      ...defaultsConfig,\r\n      ...config\r\n    })\r\n    if (Array.isArray(model)) {\r\n      this._arrayModelFormat(model)\r\n    } else if (isString(model)) {\r\n      this._stringModelFormat(model)\r\n    }\r\n  }\r\n\r\n  VERSION = version\r\n\r\n  _model\r\n  _config\r\n\r\n  /**\r\n   * 返回modelItem\r\n   * @param {string} name - name 必传\r\n   * @param {string} value\r\n   * @return {undefined}\r\n   *\r\n   * */\r\n  _createModelItem (name, value) {\r\n    const that = this\r\n    if (!name) return\r\n    // 是否为无参数命令\r\n    const isNoArgCommand = this._config.withoutParamsCommand.includes(name)\r\n    // 是否为多个参数的命令\r\n    const multipleArgCommand = this._config.multipleArgCommand.includes(name)\r\n    let argType = ''\r\n    if (isNoArgCommand) {\r\n      argType = WITHOUT_PARAMETERS\r\n    } else if (multipleArgCommand) {\r\n      argType = MULTI_PARAMETER\r\n    } else {\r\n      argType = SINGLE_PARAMETER\r\n    }\r\n    const modelItem = {\r\n      name,\r\n      [ARGUMENTS_NAME]: that._commandValueFormat(name, value),\r\n      [COMMAND_TYPE_KEY]: argType\r\n    }\r\n    return modelItem\r\n  }\r\n\r\n  /***\r\n   * 处理命令的值。\r\n   * @param {string} name - name 必传，否则返回undefined\r\n   * @param {any} value - 接收任何值\r\n   * @return\r\n   * 当 name 是一个无参数命令时 返回 NO_ARG_COMMAND_VAL\r\n   * 当 name 是只有一个参数的命令时 返回 value\r\n   * 当 name 是一个多参数命令时，如果value 是对象，则返回value;如果value 是字符串，则认为value 是一个多参数字符串，会把其格式化成对象返回；如果value 是undefined ，则返回{}；其他类型，返回value\r\n   */\r\n  _commandValueFormat (name, value) {\r\n    if (!name) {\r\n      // TODO name 必传\r\n      return\r\n    }\r\n    const config = this._config\r\n    // 是否为无参数命令\r\n    const isNoArgCommand = config.withoutParamsCommand.includes(name)\r\n\r\n    if (isNoArgCommand) {\r\n      return NO_ARG_COMMAND_VAL\r\n    } else {\r\n      // 是否为多个参数的命令\r\n      const multipleArgCommand = config.multipleArgCommand.includes(name)\r\n      // value 不存在\r\n      const valueIsUndefined = isUndefined(value)\r\n      if (multipleArgCommand) {\r\n        if (valueIsUndefined) return {}\r\n        const valueType = typeof value\r\n        if (valueType === 'object') {\r\n          return value\r\n        } else if (valueType === 'string') {\r\n          const splitStr = value.split(config.COMMAND_SEPARATOR)\r\n          return splitStr.reduce((pre, cur) => {\r\n            if (cur) {\r\n              const curSplit = cur.split(config.PARAMETER_SEPARATOR)\r\n              const curComArgName = curSplit[0]\r\n              if (curComArgName) {\r\n                curSplit.shift()\r\n                /***\r\n                 * https://support.huaweicloud.com/fg-obs/obs_01_0461.html\r\n                 * 因为在图片水印的时候，参数的值不一定只有一个_ ，所以这里删除第一个，后面的还原\r\n                 */\r\n                pre[curComArgName] = curSplit.join(config.PARAMETER_SEPARATOR)\r\n              }\r\n            }\r\n            return pre\r\n          }, {})\r\n        } else {\r\n          return {}\r\n        }\r\n      } else {\r\n        return value\r\n      }\r\n    }\r\n  }\r\n\r\n  /***\r\n   * 对数组模型进行格式化\r\n   * @param {array} model - 模型\r\n   * @param {string} model.name - 命令名称\r\n   * @param {string | number | any} model.value - 命令值;可以是一个字符串模型，或者undefined\r\n   * @private\r\n   */\r\n  _arrayModelFormat (model) {\r\n    model.forEach(p1 => {\r\n      const curName = p1.name\r\n      this.append(curName, p1[ARGUMENTS_NAME])\r\n    })\r\n  }\r\n\r\n  /***\r\n   * 对字符串模型进行格式化\r\n   * @param str\r\n   * @private\r\n   * @example\r\n   * /resize,m_fill,w_270,h_205,limit_0/format,jpg\r\n   */\r\n  _stringModelFormat (str) {\r\n    const commandSplit = str.split(this._config.PIPE_SEPARATOR)\r\n    const COMMAND_SEPARATOR = this._config.COMMAND_SEPARATOR\r\n    commandSplit.forEach(p1 => {\r\n      if (p1) {\r\n        const commandValSplit = p1.split(COMMAND_SEPARATOR)\r\n        const commAndName = commandValSplit[0]\r\n        commandValSplit.shift()\r\n\r\n        const nameValue = commandValSplit.join(COMMAND_SEPARATOR)\r\n        this.append(commAndName, nameValue)\r\n      }\r\n    })\r\n  }\r\n\r\n  /***\r\n   * 追加参数。如果有同一个命令。参数会合并\r\n   * @param name\r\n   * @param value\r\n   */\r\n  append (name, value) {\r\n    this._modelHandle(name, value, 'append')\r\n  }\r\n\r\n  /***\r\n   * 设置参数，覆盖\r\n   * @param name\r\n   * @param value\r\n   */\r\n  set (name, value) {\r\n    this._modelHandle(name, value, 'set')\r\n  }\r\n\r\n  /**\r\n   * 删除指定命令\r\n   * */\r\n  delete (name) {\r\n    if (name) {\r\n      const model = this._model\r\n      const nameIndex = model.findIndex(item => item.name === name)\r\n      if (nameIndex > -1) {\r\n        this._model.splice(nameIndex, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  /***\r\n   * 指定name 是否存在\r\n   * @param {string} name - 命令名称\r\n   * @return {boolean}\r\n   */\r\n  has (name) {\r\n    return this._model.some(item => item.name === name)\r\n  }\r\n\r\n  /***\r\n   * 排序\r\n   */\r\n  sort () {\r\n    const model = this._model\r\n    const COMMAND_SORT = this._config.COMMAND_SORT\r\n    model.sort((a, b) => {\r\n      return COMMAND_SORT.indexOf(a.name) - COMMAND_SORT.indexOf(b.name)\r\n    })\r\n    this._model = model\r\n  }\r\n\r\n  /***\r\n   * model 处理\r\n   * @param name\r\n   * @param value\r\n   * @param type {string} [set|append] set/append\r\n   */\r\n  _modelHandle (name, value, type) {\r\n    if (!name) {\r\n      return\r\n    }\r\n    const model = this._model\r\n    // const typeValue = typeof value\r\n    // const isNoArgCommand = WITHOUT_PARAMETERS_COMMAND.includes(name)\r\n    const modelItem = this._createModelItem(name, value)\r\n    if (!modelItem) return\r\n    const modelLen = model.length\r\n    if (modelLen === 0) {\r\n      model.push(modelItem)\r\n    } else {\r\n      let hasCurCommand = true\r\n      const lastIndex = modelLen - 1\r\n      for (let i = 0; i < modelLen; i++) {\r\n        const item = model[i]\r\n        if (item.name === name) {\r\n          const argType = item[COMMAND_TYPE_KEY]\r\n          if (argType === SINGLE_PARAMETER) {\r\n            // 只有一个参数的命令\r\n            item[ARGUMENTS_NAME] = modelItem[ARGUMENTS_NAME]\r\n          } else if (argType === MULTI_PARAMETER) {\r\n            // 多参数命令\r\n            if (type === 'set') {\r\n              item[ARGUMENTS_NAME] = modelItem[ARGUMENTS_NAME]\r\n            } else {\r\n              item[ARGUMENTS_NAME] = {\r\n                ...item[ARGUMENTS_NAME],\r\n                ...modelItem[ARGUMENTS_NAME]\r\n              }\r\n            }\r\n          }\r\n          break\r\n        } else if (i === lastIndex) {\r\n          hasCurCommand = false\r\n        }\r\n      }\r\n      if (!hasCurCommand) {\r\n        model.push(modelItem)\r\n      }\r\n    }\r\n    this._model = model\r\n    this.sort()\r\n  }\r\n\r\n  toString () {\r\n    const model = this._model\r\n    const config = this._config\r\n    return model.reduce((pre, cur) => {\r\n      let val = ''\r\n      const commandValue = cur[ARGUMENTS_NAME]\r\n      const argType = cur[COMMAND_TYPE_KEY]\r\n      // 不是无参数命令\r\n      if (argType !== WITHOUT_PARAMETERS) {\r\n        if (argType === MULTI_PARAMETER) {\r\n          if (isNotEmptyObj(commandValue)) {\r\n            let initVal = ''\r\n            Object.keys(commandValue).forEach(p1 => {\r\n              if (!myIsEmpty(commandValue[p1])) {\r\n                initVal += `${config.COMMAND_SEPARATOR}${p1}${config.PARAMETER_SEPARATOR}${commandValue[p1]}`\r\n              }\r\n            })\r\n            val = initVal\r\n          }\r\n        } else {\r\n          if (!myIsEmpty(commandValue)) {\r\n            val = `${config.COMMAND_SEPARATOR}${commandValue}`\r\n          }\r\n        }\r\n        if (val) {\r\n          pre += `${config.PIPE_SEPARATOR}${cur.name}${val}`\r\n        }\r\n      } else {\r\n        pre += `${config.PIPE_SEPARATOR}${cur.name}`\r\n      }\r\n      return pre\r\n    }, '')\r\n  }\r\n}\r\n","export function deepClone(target) {\r\n  // weakMap 防止循环引用\r\n  const map = new WeakMap()\r\n  // obj\r\n  function isObject(target) {\r\n    return (\r\n      (typeof target === 'object' && target) || typeof target === 'function'\r\n    )\r\n  }\r\n\r\n  function clone(data) {\r\n    // 基础类型\r\n    if (!isObject(data)) {\r\n      return data\r\n    }\r\n    // 日期 正则对象\r\n    if ([Date, RegExp].includes(data.constructor)) {\r\n      return new data.constructor(data)\r\n    }\r\n    // function\r\n    if (typeof data === 'function') {\r\n      return new Function('return ' + data.toString())()\r\n    }\r\n\r\n    // 对象已存在则直接返回\r\n    const exit = map.get(data)\r\n    if (exit) {\r\n      return exit\r\n    }\r\n\r\n    // Map\r\n    if (data instanceof Map) {\r\n      const result = new Map()\r\n      data.forEach((key, value) => {\r\n        if (isObject(value)) {\r\n          result.set(key, clone(value))\r\n        } else {\r\n          result.set(key, value)\r\n        }\r\n      })\r\n      map.set(data, result)\r\n      return result\r\n    }\r\n\r\n    // Set\r\n    if (data instanceof Set) {\r\n      const result = new Set()\r\n      data.forEach((value) => {\r\n        if (isObject(value)) {\r\n          result.add(clone(value))\r\n        } else {\r\n          result.add(value)\r\n        }\r\n      })\r\n      map.set(data, result)\r\n      return result\r\n    }\r\n    if (Array.isArray(data)) {\r\n      const result = []\r\n      data.forEach((item) => {\r\n        if (isObject(item)) {\r\n          result.push(clone(item))\r\n        } else {\r\n          result.push(item)\r\n        }\r\n      })\r\n      map.set(data, result)\r\n      return result\r\n    }\r\n    // 收集键名\r\n    const keys = Reflect.ownKeys(data)\r\n    const allDesc = Object.getOwnPropertyDescriptors(data)\r\n    const result = Object.create(Object.getPrototypeOf(data, allDesc))\r\n\r\n    keys.forEach((key) => {\r\n      const value = data[key]\r\n\r\n      if (isObject(value)) {\r\n        result[key] = clone(value)\r\n      } else {\r\n        result[key] = value\r\n      }\r\n    })\r\n    map.set(data, result)\r\n    return result\r\n  }\r\n\r\n  return clone(target)\r\n}\r\n"],"names":["cache","kindOf","Object","create","thing","toString","call","str","slice","toLowerCase","typeOfTest","type","getPrototypeOf","isString","isUndefined","isEmpty","val","WITHOUT_PARAMETERS_COMMAND","imageWithout","imageSort","defaultsConfig","withoutParamsCommand","multipleArgCommand","concat","commandSort","COMMAND_SORT","PIPE_SEPARATOR","PARAMETER_SEPARATOR","COMMAND_SEPARATOR","ProcessModel","model","config","this","VERSION","_model","_config","target","data","isObject","Date","RegExp","includes","constructor","Function","exit","map","get","Map","forEach","key","value","result","set","clone","_result","add","Array","isArray","_result3","item","push","keys","Reflect","ownKeys","getOwnPropertyDescriptors","allDesc","deepClone","_arrayModelFormat","_stringModelFormat","_proto","prototype","_createModelItem","name","_modelItem","argType","isNoArgCommand","_commandValueFormat","valueIsUndefined","valueType","split","reduce","pre","cur","curSplit","curComArgName","shift","join","p1","_this","append","_this2","commandSplit","commAndName","commandValSplit","nameValue","_modelHandle","nameIndex","findIndex","splice","has","some","sort","a","b","indexOf","modelItem","modelLen","length","hasCurCommand","lastIndex","i","_extends","commandValue","Symbol","toStringTag","iterator","isPlainObject","getOwnPropertyNames","isNotEmptyObj","initVal","myIsEmpty"],"mappings":"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"}