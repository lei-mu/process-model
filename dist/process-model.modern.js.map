{"version":3,"file":"process-model.modern.js","sources":["../src/utils/check.js","../src/processModel/config.js","../src/types/index.js","../src/types/image.js","../src/types/imm.js","../src/types/video.js","../src/processModel/ProcessModel.js","../src/utils/index.js"],"sourcesContent":["// import { protocol } from './regix'\r\n// import { isObject, isFunction } from 'lodash-es'\r\n// import isPlainObject from 'lodash-es/isPlainObject'\r\n\r\n// export const checkProtocol = (val) => {\r\n//   return protocol.test(val)\r\n// }\r\n\r\n// export const isPromise = (val) => {\r\n//   return isObject(val) && isFunction(val.then) && isFunction(val.catch)\r\n// }\r\nconst kindOf = (cache => thing => {\r\n  const str = toString.call(thing);\r\n  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\r\n})(Object.create(null));\r\n\r\nconst typeOfTest = type => thing => typeof thing === type;\r\n\r\nconst {getPrototypeOf} = Object;\r\n\r\nconst isPlainObject = (val) => {\r\n  if (kindOf(val) !== 'object') {\r\n    return false;\r\n  }\r\n\r\n  const prototype = getPrototypeOf(val);\r\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\r\n}\r\n\r\n\r\n\r\nexport const isString = typeOfTest('string');\r\n\r\n\r\nexport const isUndefined = typeOfTest('undefined');\r\n\r\n\r\n\r\n/***\r\n * 是否为空\r\n * @param val\r\n * @return {boolean}\r\n */\r\nexport function isEmpty(val) {\r\n  return (val === null) || (val === undefined) || (val === '')\r\n}\r\n\r\n/***\r\n * 是否是一个 不为空的真对象\r\n */\r\n\r\nexport function isNotEmptyObj(val) {\r\n  return isPlainObject(val) && Object.getOwnPropertyNames(val).length !== 0\r\n}\r\n","import {\r\n  WITHOUT_PARAMETERS_COMMAND,\r\n  PIPE_SEPARATOR,\r\n  COMMAND_SEPARATOR,\r\n  PARAMETER_SEPARATOR,\r\n  COMMAND_SORT,\r\n  MULTIPLE_ARG_COMMAND\r\n} from '../types'\r\n\r\nexport default {\r\n  // 无参数命令合集\r\n  withoutParamsCommand: WITHOUT_PARAMETERS_COMMAND,\r\n  // 多个参数的命令合集\r\n  multipleArgCommand: MULTIPLE_ARG_COMMAND,\r\n  // 命令排序规则\r\n  commandSort: COMMAND_SORT,\r\n  PIPE_SEPARATOR,\r\n  PARAMETER_SEPARATOR,\r\n  COMMAND_SEPARATOR\r\n}\r\n","import {\r\n  WITHOUT_PARAMETERS_COMMAND as imageWithout,\r\n  COMMAND_SORT as imageSort,\r\n  MULTIPLE_ARG_COMMAND as imageMultiple\r\n} from './image'\r\nimport {\r\n  WITHOUT_PARAMETERS_COMMAND as immWithout,\r\n  COMMAND_SORT as immSort,\r\n  MULTIPLE_ARG_COMMAND as immMultiple\r\n} from './imm'\r\nimport {\r\n  WITHOUT_PARAMETERS_COMMAND as videoWithout,\r\n  COMMAND_SORT as videoSort,\r\n  MULTIPLE_ARG_COMMAND as videoMultiple\r\n} from './video'\r\n\r\n// 任务流名称\r\nexport const PROCESS_NAME = 'x-image-process'\r\n\r\n/**\r\n * 分隔符\r\n * https://support.huaweicloud.com/fg-obs/obs_01_0224.html#obs_01_0224__table19527120647\r\n * */\r\n// 参数分隔符\r\nexport const PARAMETER_SEPARATOR = '_'\r\n\r\n// 命令分隔符\r\nexport const COMMAND_SEPARATOR = ','\r\n\r\n// 管道分隔符\r\nexport const PIPE_SEPARATOR = '/'\r\n\r\n// 无参数命令\r\nexport const WITHOUT_PARAMETERS_COMMAND = [...imageWithout, ...immWithout, ...videoWithout]\r\n\r\n// 命令排序\r\nexport const COMMAND_SORT = [...imageSort, ...immSort, ...videoSort]\r\n\r\n// 有多个参数的命令\r\nexport const MULTIPLE_ARG_COMMAND = [...imageMultiple, ...immMultiple, ...videoMultiple]\r\n","/***\r\n * https://support.huaweicloud.com/ugobs-obs/obs_41_0032.html\r\n *\r\n */\r\n\r\n\r\n\r\n\r\n\r\n/***\r\n * 图片处理\r\n */\r\n\r\n/**\r\n * 图片效果\r\n * */\r\n// 亮度\r\nexport const COMMAND_BRIGHT = 'bright'\r\n\r\n// 对比度\r\nexport const COMMAND_CONTRAST = 'contrast'\r\n\r\n// 锐化\r\nexport const COMMAND_SHARPEN = 'sharpen'\r\n\r\n// 模糊\r\nexport const COMMAND_BLUR = 'blur'\r\n\r\n/**\r\n * 设置缩略\r\n * */\r\nexport const COMMAND_RESIZE = 'resize'\r\n\r\n/**\r\n * 旋转图片\r\n * */\r\n// 旋转设置\r\nexport const COMMAND_ROTATE = 'rotate'\r\n\r\n// 自适应方向\r\nexport const COMMAND_AUTO_ORIENT = 'auto-orient'\r\n\r\n/**\r\n * 剪切图片\r\n * */\r\n// 普通剪切\r\nexport const COMMAND_CROP = 'crop'\r\n\r\n// 内切圆\r\nexport const COMMAND_CIRCLE = 'circle'\r\n\r\n// 索引剪切\r\nexport const COMMAND_INDEXCROP = 'indexcrop'\r\n\r\n// 圆角剪切\r\nexport const COMMAND_ROUNDED_CORNERS = 'rounded-corners'\r\n\r\n/**\r\n * 设置水印\r\n * */\r\n// 设置水印\r\nexport const COMMAND_WATERMARK = 'watermark'\r\n\r\n/**\r\n * 格式转换\r\n * */\r\n// 格式转换\r\nexport const COMMAND_FORMAT = 'format'\r\n\r\n// 渐进显示\r\nexport const COMMAND_INTERLACE = 'interlace'\r\n\r\n/**\r\n * 质量变换\r\n * */\r\n// 质量变换\r\nexport const COMMAND_QUALITY = 'quality'\r\n\r\n// 设置图片瘦身\r\nexport const COMMAND_IMAGESLIM = 'imageslim'\r\n\r\n/**\r\n * 获取图片信息\r\n * */\r\nexport const COMMAND_INFO = 'info'\r\n\r\n/***\r\n * 获取图片平均色值\r\n * @type {string}\r\n */\r\n// 获取图片平均色值\r\nexport const COMMAND_AVERAGE_HUE = 'average-hue'\r\n\r\n// 无参数命令\r\nexport const WITHOUT_PARAMETERS_COMMAND = [COMMAND_INFO, COMMAND_AVERAGE_HUE, COMMAND_IMAGESLIM]\r\n\r\n// 命令排序\r\nexport const COMMAND_SORT = [COMMAND_RESIZE, COMMAND_CROP, COMMAND_CIRCLE, COMMAND_INDEXCROP, COMMAND_ROUNDED_CORNERS, COMMAND_ROTATE, COMMAND_AUTO_ORIENT, COMMAND_BRIGHT, COMMAND_CONTRAST, COMMAND_SHARPEN, COMMAND_BLUR, COMMAND_WATERMARK, COMMAND_QUALITY, COMMAND_FORMAT, COMMAND_INTERLACE, COMMAND_IMAGESLIM, COMMAND_INFO, COMMAND_AVERAGE_HUE]\r\n\r\n// 有多个参数的命令\r\nexport const MULTIPLE_ARG_COMMAND = [COMMAND_BLUR,COMMAND_RESIZE,COMMAND_CROP,COMMAND_CIRCLE,COMMAND_INDEXCROP,COMMAND_ROUNDED_CORNERS,COMMAND_WATERMARK,COMMAND_QUALITY]\r\n","// https://help.aliyun.com/document_detail/99373.html\r\n\r\n/***\r\n * imm 常量\r\n */\r\n\r\n\r\n// 文档预览\r\nexport const COMMAND_PREVIEW = 'previewdoc'\r\n\r\n// 人脸识别\r\nexport const COMMAND_DETECTFACE = 'detectface'\r\n\r\n// 图片识别\r\nexport const COMMAND_TAGIMAGE = 'tagimage'\r\n\r\n\r\n\r\n// 无参数命令\r\nexport const WITHOUT_PARAMETERS_COMMAND = [COMMAND_DETECTFACE,COMMAND_TAGIMAGE]\r\n\r\n// 命令排序\r\nexport const COMMAND_SORT = []\r\n\r\n// 有多个参数的命令\r\nexport const MULTIPLE_ARG_COMMAND = []\r\n","/***\r\n * 视频处理常量\r\n */\r\n\r\nexport const COMMAND_SNAPSHOT = 'snapshot'\r\n\r\n// 无参数命令\r\nexport const WITHOUT_PARAMETERS_COMMAND = []\r\n\r\n// 命令排序\r\nexport const COMMAND_SORT = []\r\n\r\n// 有多个参数的命令\r\nexport const MULTIPLE_ARG_COMMAND = [COMMAND_SNAPSHOT]\r\n","import { isEmpty as myIsEmpty, isNotEmptyObj, isString, isUndefined } from '../utils/check'\r\nimport {deepClone} from '../utils/index.js'\r\n\r\nimport defaultsConfig from './config'\r\nimport {version} from '../../package.json'\r\n// import isObject from 'lodash-es/isObject'\r\n// import isEmpty from 'lodash-es/isEmpty'\r\n\r\n// 无参数命令 的默认值\r\n// eslint-disable-next-line no-void\r\nconst NO_ARG_COMMAND_VAL = void (0)\r\n\r\n// 没有参数的标识key\r\nconst WITHOUT_PARAMETERS = 'without'\r\n// 单参数命令\r\nconst SINGLE_PARAMETER = 'single'\r\n// 多参数标识\r\nconst MULTI_PARAMETER = 'multi'\r\n\r\n// 参数的key\r\nconst ARGUMENTS_NAME = 'value'\r\n\r\n// 参数类型\r\nconst COMMAND_TYPE_KEY = 'type'\r\n/**\r\n * @example\r\n * https://shigongbang.obs.cn-east-3.myhuaweicloud.com/material/650000/20210720219212964129485?x-image-process=image/resize,m_fill,w_270,h_205,limit_0\r\n * 只处理 x-image-process 字段，或者数组\r\n *\r\n * */\r\nexport default class ProcessModel {\r\n  // TODO 后期考虑增加type,区分 image,video,imm。精细处理\r\n  constructor (model, config = {}) {\r\n    this._model = []\r\n    this._config = deepClone({\r\n      ...defaultsConfig,\r\n      ...config\r\n    })\r\n    if (Array.isArray(model)) {\r\n      this._arrayModelFormat(model)\r\n    } else if (isString(model)) {\r\n      this._stringModelFormat(model)\r\n    }\r\n  }\r\n\r\n  VERSION = version\r\n\r\n  _model\r\n  _config\r\n\r\n  /**\r\n   * 返回modelItem\r\n   * @param {string} name - name 必传\r\n   * @param {string} value\r\n   * @return {undefined}\r\n   *\r\n   * */\r\n  _createModelItem (name, value) {\r\n    const that = this\r\n    if (!name) return\r\n    // 是否为无参数命令\r\n    const isNoArgCommand = this._config.withoutParamsCommand.includes(name)\r\n    // 是否为多个参数的命令\r\n    const multipleArgCommand = this._config.multipleArgCommand.includes(name)\r\n    let argType = ''\r\n    if (isNoArgCommand) {\r\n      argType = WITHOUT_PARAMETERS\r\n    } else if (multipleArgCommand) {\r\n      argType = MULTI_PARAMETER\r\n    } else {\r\n      argType = SINGLE_PARAMETER\r\n    }\r\n    const modelItem = {\r\n      name,\r\n      [ARGUMENTS_NAME]: that._commandValueFormat(name, value),\r\n      [COMMAND_TYPE_KEY]: argType\r\n    }\r\n    return modelItem\r\n  }\r\n\r\n  /***\r\n   * 处理命令的值。\r\n   * @param {string} name - name 必传，否则返回undefined\r\n   * @param {any} value - 接收任何值\r\n   * @return\r\n   * 当 name 是一个无参数命令时 返回 NO_ARG_COMMAND_VAL\r\n   * 当 name 是只有一个参数的命令时 返回 value\r\n   * 当 name 是一个多参数命令时，如果value 是对象，则返回value;如果value 是字符串，则认为value 是一个多参数字符串，会把其格式化成对象返回；如果value 是undefined ，则返回{}；其他类型，返回value\r\n   */\r\n  _commandValueFormat (name, value) {\r\n    if (!name) {\r\n      // TODO name 必传\r\n      return\r\n    }\r\n    const config = this._config\r\n    // 是否为无参数命令\r\n    const isNoArgCommand = config.withoutParamsCommand.includes(name)\r\n\r\n    if (isNoArgCommand) {\r\n      return NO_ARG_COMMAND_VAL\r\n    } else {\r\n      // 是否为多个参数的命令\r\n      const multipleArgCommand = config.multipleArgCommand.includes(name)\r\n      // value 不存在\r\n      const valueIsUndefined = isUndefined(value)\r\n      if (multipleArgCommand) {\r\n        if (valueIsUndefined) return {}\r\n        const valueType = typeof value\r\n        if (valueType === 'object') {\r\n          return value\r\n        } else if (valueType === 'string') {\r\n          const splitStr = value.split(config.COMMAND_SEPARATOR)\r\n          return splitStr.reduce((pre, cur) => {\r\n            if (cur) {\r\n              const curSplit = cur.split(config.PARAMETER_SEPARATOR)\r\n              const curComArgName = curSplit[0]\r\n              if (curComArgName) {\r\n                curSplit.shift()\r\n                /***\r\n                 * https://support.huaweicloud.com/fg-obs/obs_01_0461.html\r\n                 * 因为在图片水印的时候，参数的值不一定只有一个_ ，所以这里删除第一个，后面的还原\r\n                 */\r\n                pre[curComArgName] = curSplit.join(config.PARAMETER_SEPARATOR)\r\n              }\r\n            }\r\n            return pre\r\n          }, {})\r\n        } else {\r\n          return {}\r\n        }\r\n      } else {\r\n        return value\r\n      }\r\n    }\r\n  }\r\n\r\n  /***\r\n   * 对数组模型进行格式化\r\n   * @param {array} model - 模型\r\n   * @param {string} model.name - 命令名称\r\n   * @param {string | number | any} model.value - 命令值;可以是一个字符串模型，或者undefined\r\n   * @private\r\n   */\r\n  _arrayModelFormat (model) {\r\n    model.forEach(p1 => {\r\n      const curName = p1.name\r\n      this.append(curName, p1[ARGUMENTS_NAME])\r\n    })\r\n  }\r\n\r\n  /***\r\n   * 对字符串模型进行格式化\r\n   * @param str\r\n   * @private\r\n   * @example\r\n   * /resize,m_fill,w_270,h_205,limit_0/format,jpg\r\n   */\r\n  _stringModelFormat (str) {\r\n    const commandSplit = str.split(this._config.PIPE_SEPARATOR)\r\n    const COMMAND_SEPARATOR = this._config.COMMAND_SEPARATOR\r\n    commandSplit.forEach(p1 => {\r\n      if (p1) {\r\n        const commandValSplit = p1.split(COMMAND_SEPARATOR)\r\n        const commAndName = commandValSplit[0]\r\n        commandValSplit.shift()\r\n\r\n        const nameValue = commandValSplit.join(COMMAND_SEPARATOR)\r\n        this.append(commAndName, nameValue)\r\n      }\r\n    })\r\n  }\r\n\r\n  /***\r\n   * 追加参数。如果有同一个命令。参数会合并\r\n   * @param name\r\n   * @param value\r\n   */\r\n  append (name, value) {\r\n    this._modelHandle(name, value, 'append')\r\n  }\r\n\r\n  /***\r\n   * 设置参数，覆盖\r\n   * @param name\r\n   * @param value\r\n   */\r\n  set (name, value) {\r\n    this._modelHandle(name, value, 'set')\r\n  }\r\n\r\n  /**\r\n   * 删除指定命令\r\n   * */\r\n  delete (name) {\r\n    if (name) {\r\n      const model = this._model\r\n      const nameIndex = model.findIndex(item => item.name === name)\r\n      if (nameIndex > -1) {\r\n        this._model.splice(nameIndex, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  /***\r\n   * 指定name 是否存在\r\n   * @param {string} name - 命令名称\r\n   * @return {boolean}\r\n   */\r\n  has (name) {\r\n    return this._model.some(item => item.name === name)\r\n  }\r\n\r\n  /***\r\n   * 排序\r\n   */\r\n  sort () {\r\n    const model = this._model\r\n    const COMMAND_SORT = this._config.commandSort\r\n    model.sort((a, b) => {\r\n      return COMMAND_SORT.indexOf(a.name) - COMMAND_SORT.indexOf(b.name)\r\n    })\r\n    this._model = model\r\n  }\r\n\r\n  /***\r\n   * model 处理\r\n   * @param name\r\n   * @param value\r\n   * @param type {string} [set|append] set/append\r\n   */\r\n  _modelHandle (name, value, type) {\r\n    if (!name) {\r\n      return\r\n    }\r\n    const model = this._model\r\n    // const typeValue = typeof value\r\n    // const isNoArgCommand = WITHOUT_PARAMETERS_COMMAND.includes(name)\r\n    const modelItem = this._createModelItem(name, value)\r\n    if (!modelItem) return\r\n    const modelLen = model.length\r\n    if (modelLen === 0) {\r\n      model.push(modelItem)\r\n    } else {\r\n      let hasCurCommand = true\r\n      const lastIndex = modelLen - 1\r\n      for (let i = 0; i < modelLen; i++) {\r\n        const item = model[i]\r\n        if (item.name === name) {\r\n          const argType = item[COMMAND_TYPE_KEY]\r\n          if (argType === SINGLE_PARAMETER) {\r\n            // 只有一个参数的命令\r\n            item[ARGUMENTS_NAME] = modelItem[ARGUMENTS_NAME]\r\n          } else if (argType === MULTI_PARAMETER) {\r\n            // 多参数命令\r\n            if (type === 'set') {\r\n              item[ARGUMENTS_NAME] = modelItem[ARGUMENTS_NAME]\r\n            } else {\r\n              item[ARGUMENTS_NAME] = {\r\n                ...item[ARGUMENTS_NAME],\r\n                ...modelItem[ARGUMENTS_NAME]\r\n              }\r\n            }\r\n          }\r\n          break\r\n        } else if (i === lastIndex) {\r\n          hasCurCommand = false\r\n        }\r\n      }\r\n      if (!hasCurCommand) {\r\n        model.push(modelItem)\r\n      }\r\n    }\r\n    this._model = model\r\n    this.sort()\r\n  }\r\n\r\n  toString () {\r\n    const model = this._model\r\n    const config = this._config\r\n    return model.reduce((pre, cur) => {\r\n      let val = ''\r\n      const commandValue = cur[ARGUMENTS_NAME]\r\n      const argType = cur[COMMAND_TYPE_KEY]\r\n      // 不是无参数命令\r\n      if (argType !== WITHOUT_PARAMETERS) {\r\n        if (argType === MULTI_PARAMETER) {\r\n          if (isNotEmptyObj(commandValue)) {\r\n            let initVal = ''\r\n            Object.keys(commandValue).forEach(p1 => {\r\n              if (!myIsEmpty(commandValue[p1])) {\r\n                initVal += `${config.COMMAND_SEPARATOR}${p1}${config.PARAMETER_SEPARATOR}${commandValue[p1]}`\r\n              }\r\n            })\r\n            val = initVal\r\n          }\r\n        } else {\r\n          if (!myIsEmpty(commandValue)) {\r\n            val = `${config.COMMAND_SEPARATOR}${commandValue}`\r\n          }\r\n        }\r\n        if (val) {\r\n          pre += `${config.PIPE_SEPARATOR}${cur.name}${val}`\r\n        }\r\n      } else {\r\n        pre += `${config.PIPE_SEPARATOR}${cur.name}`\r\n      }\r\n      return pre\r\n    }, '')\r\n  }\r\n}\r\n","export function deepClone(target) {\r\n  // weakMap 防止循环引用\r\n  const map = new WeakMap()\r\n  // obj\r\n  function isObject(target) {\r\n    return (\r\n      (typeof target === 'object' && target) || typeof target === 'function'\r\n    )\r\n  }\r\n\r\n  function clone(data) {\r\n    // 基础类型\r\n    if (!isObject(data)) {\r\n      return data\r\n    }\r\n    // 日期 正则对象\r\n    if ([Date, RegExp].includes(data.constructor)) {\r\n      return new data.constructor(data)\r\n    }\r\n    // function\r\n    if (typeof data === 'function') {\r\n      return new Function('return ' + data.toString())()\r\n    }\r\n\r\n    // 对象已存在则直接返回\r\n    const exit = map.get(data)\r\n    if (exit) {\r\n      return exit\r\n    }\r\n\r\n    // Map\r\n    if (data instanceof Map) {\r\n      const result = new Map()\r\n      data.forEach((key, value) => {\r\n        if (isObject(value)) {\r\n          result.set(key, clone(value))\r\n        } else {\r\n          result.set(key, value)\r\n        }\r\n      })\r\n      map.set(data, result)\r\n      return result\r\n    }\r\n\r\n    // Set\r\n    if (data instanceof Set) {\r\n      const result = new Set()\r\n      data.forEach((value) => {\r\n        if (isObject(value)) {\r\n          result.add(clone(value))\r\n        } else {\r\n          result.add(value)\r\n        }\r\n      })\r\n      map.set(data, result)\r\n      return result\r\n    }\r\n    if (Array.isArray(data)) {\r\n      const result = []\r\n      data.forEach((item) => {\r\n        if (isObject(item)) {\r\n          result.push(clone(item))\r\n        } else {\r\n          result.push(item)\r\n        }\r\n      })\r\n      map.set(data, result)\r\n      return result\r\n    }\r\n    // 收集键名\r\n    const keys = Reflect.ownKeys(data)\r\n    const allDesc = Object.getOwnPropertyDescriptors(data)\r\n    const result = Object.create(Object.getPrototypeOf(data, allDesc))\r\n\r\n    keys.forEach((key) => {\r\n      const value = data[key]\r\n\r\n      if (isObject(value)) {\r\n        result[key] = clone(value)\r\n      } else {\r\n        result[key] = value\r\n      }\r\n    })\r\n    map.set(data, result)\r\n    return result\r\n  }\r\n\r\n  return clone(target)\r\n}\r\n"],"names":["kindOf","cache","Object","create","thing","str","toString","call","slice","toLowerCase","type","getPrototypeOf","typeOfTest","isUndefined","isEmpty","val","defaultsConfig","withoutParamsCommand","multipleArgCommand","commandSort","PIPE_SEPARATOR","PARAMETER_SEPARATOR","COMMAND_SEPARATOR","ProcessModel","constructor","model","config","this","VERSION","_model","_config","target","clone","data","isObject","Date","RegExp","includes","exit","map","get","_result","Map","forEach","key","value","result","set","Set","add","Array","isArray","item","push","keys","Reflect","ownKeys","getOwnPropertyDescriptors","allDesc","deepClone","_arrayModelFormat","isString","_stringModelFormat","_createModelItem","name","isNoArgCommand","argType","_commandValueFormat","valueIsUndefined","valueType","split","reduce","pre","cur","curSplit","curComArgName","shift","join","p1","append","commandSplit","commandValSplit","commAndName","nameValue","_modelHandle","delete","nameIndex","findIndex","splice","has","some","sort","COMMAND_SORT","a","b","indexOf","modelItem","modelLen","length","hasCurCommand","lastIndex","i","_extends","commandValue","prototype","Symbol","toStringTag","iterator","getOwnPropertyNames","isNotEmptyObj","initVal","myIsEmpty"],"mappings":"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"}